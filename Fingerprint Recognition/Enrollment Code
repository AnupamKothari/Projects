#include <Adafruit_Fingerprint.h> //For interfacing with fingerprint sensor
#include <SoftwareSerial.h> //For serial communication
SoftwareSerial port(2, 3);
Adafruit_Fingerprint finger = Adafruit_Fingerprint(&port);
unsigned short id;
void setup()
{
 Serial.begin(57600);
 delay(100);
 Serial.println("\n\nFingerprint Enrollment");
 finger.begin(57600); // set the data rate for the sensor serial port
 if (finger.verifyPassword()) //To verify sensor access password to detect it
 {
 Serial.println("Found fingerprint sensor!");
 } 
 else {
 Serial.println("Unable to detect fingerprint sensor :(");
 exit(0);
 }
}
unsigned short readnumber(void) {
unsigned short num = 0;
 while (num == 0) {
 while (! Serial.available()); // To recieve value through serial monitor
 num = Serial.parseInt(); // To assign the recieved value to variable
 }
 return num;
}
void loop() // run over and over again
{
 Serial.println("Ready to enroll a fingerprint!");
 Serial.println("Please type in the ID # (from 1 to 1000) you want to save this finger as...");
 id = readnumber();
 if ( id<=0 || id>1000 ) {
 Serial.println("\nEnter number in range 1 to 1000\n");
 return;
 }
 Serial.println("Enrolling ID #");
 Serial.println(id);
 while (! getFingerprintEnroll() );
}
uint8_t getFingerprintEnroll() {
 int ptr = -1;
 Serial.print("\nWaiting for valid finger to enroll as #"); 
 Serial.println(id);
 while (ptr != FINGERPRINT_OK) {
 ptr = finger.getImage(); //Ask sensor to take image of the finger pressed on surface
 switch (ptr) {
 case FINGERPRINT_OK:
 Serial.println("Image taken");
 break;
 case FINGERPRINT_NOFINGER:
 Serial.println(".");
 delay(1000);
 break;
 case FINGERPRINT_PACKETRECIEVEERR:
 Serial.println("Communication error");
 break;
 case FINGERPRINT_IMAGEFAIL:
 Serial.println("Imaging error");
 break;
 default:
 Serial.println("Unknown error");
 break;
 }
 }
 // OK success!
 ptr = finger.image2Tz(1); //Ask sensor to conver image to feature template
 switch (ptr) {
 case FINGERPRINT_OK:
 Serial.println("Image converted");
 break;
 case FINGERPRINT_IMAGEMESS:
 Serial.println("Image too messy");
 return ptr;
 case FINGERPRINT_PACKETRECIEVEERR:
 Serial.println("Communication error");
 return ptr;
 case FINGERPRINT_FEATUREFAIL:
 Serial.println("Could not find fingerprint features");
 return ptr;
 case FINGERPRINT_INVALIDIMAGE:
 Serial.println("Could not find fingerprint features");
 return ptr;
 default:
 Serial.println("Unknown error");
 return ptr;
 }
 Serial.println("Remove finger");
 delay(2000);
 ptr = 0;
 while (ptr != FINGERPRINT_NOFINGER) {
 ptr = finger.getImage();
 }
 ptr = -1;
 Serial.println("\nPlace same finger again");
 while (ptr != FINGERPRINT_OK) {
 ptr = finger.getImage();
 switch (ptr) {
 case FINGERPRINT_OK:
 Serial.println("\nImage taken");
 break;
 case FINGERPRINT_NOFINGER:
 Serial.print(".");
 delay(1000);
 break;
 case FINGERPRINT_PACKETRECIEVEERR:
 Serial.println("Communication error");
 break;
 case FINGERPRINT_IMAGEFAIL:
 Serial.println("Imaging error");
 break;
 default:
 Serial.println("Unknown error");
 break;
 }
 }
 // OK success!
 ptr = finger.image2Tz(2);
 switch (ptr) {
 case FINGERPRINT_OK:
 Serial.println("Image converted");
 break;
 case FINGERPRINT_IMAGEMESS:
 Serial.println("Image too messy");
 return ptr;
 case FINGERPRINT_PACKETRECIEVEERR:
 Serial.println("Communication error");
 return ptr;
 case FINGERPRINT_FEATUREFAIL:
 Serial.println("Could not find fingerprint features");
 return ptr;
 case FINGERPRINT_INVALIDIMAGE:
 Serial.println("Could not find fingerprint features");
 return ptr;
 default:
 Serial.println("Unknown error");
 return ptr;
 }
 // OK converted!
 Serial.print("Creating model for #"); 
 Serial.println(id);
 ptr = finger.createModel(); //Ask the sensor to take two print feature template and create a model
 if (ptr == FINGERPRINT_OK) {
 Serial.println("Prints matched!");
 } else if (ptr == FINGERPRINT_PACKETRECIEVEERR) {
 Serial.println("Communication error");
 return ptr;
 } else if (ptr == FINGERPRINT_ENROLLMISMATCH) {
 Serial.println("Fingerprints did not match");
 return ptr;
 } else {
 Serial.println("Unknown error");
 return ptr;
 }
 Serial.print("ID "); Serial.println(id);
 ptr = finger.storeModel(id); // Ask the sensor to store the calculated model for later matching
 if (ptr == FINGERPRINT_OK) {
 Serial.println("Stored!");
 } else if (ptr == FINGERPRINT_PACKETRECIEVEERR) {
 Serial.println("Communication error");
 return ptr;
 } else if (ptr == FINGERPRINT_BADLOCATION) {
 Serial.println("Could not store in that location");
 return ptr;
 } else if (ptr == FINGERPRINT_FLASHERR) {
 Serial.println("Error writing to flash");
 return ptr;
 } else {
 Serial.println("Unknown error");
 return ptr;
 }
 return true;
}
